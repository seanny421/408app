import type { NextPage } from 'next'
import Head from 'next/head'
import styles from '../styles/Home.module.css'
import useStore from '../global/state'
import {useEffect, useState} from 'react'
import { ThemeProvider, CssBaseline, Button } from '@mui/material'
import {darkTheme, lightTheme} from '../styles/themes'
import SettingsMenu from '../components/SettingsMenu'
import { compress, decompress } from '@amoutonbrady/lz-string'
import {DownloadedClip} from '../global/types'

const Editor: NextPage = () => {
  const store = useStore();
  const [isLight, setIsLight] = useState(true); //default is darkmode
  const [downloadedClips, setDownloadedClips] = useState([]);

  //run on store.isLight update
  useEffect(() => {
    setIsLight(store.isLight);
  }, [store.isLight]);

  useEffect(() => {
    setDownloadedClips(store.downloadedClips)
  }, []);

  useEffect(() => {
    console.log(store.downloadedClips)
  }, [store.downloadedClips]);

  function createVideoUrl(buffer:string){
    const z = (JSON.parse(decompress(buffer)))
    const x = new Uint8Array(Object.values(z))
    // const x = new Uint8Array((decompress(buffer)).split(','))
    console.log(x)
    console.log(URL.createObjectURL(new Blob([x.buffer], {type: 'video/mp4'})))
    return String(URL.createObjectURL(new Blob([x.buffer], {type: 'video/mp4'})))
  }

  return (
    <ThemeProvider theme={isLight ? lightTheme : darkTheme}>
      <CssBaseline/>
      <div className={styles.container}>
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <main className={styles.main}>
          <SettingsMenu/>
          <h2 className={styles.title}>Captions</h2>
          {downloadedClips.map(function(vid:DownloadedClip, i){
            return(
              <video key={i} style={{padding: '1rem', width: '100%'}} controls src={createVideoUrl(vid.bufferData)} />
            )
          })}
        </main>
      </div>
    </ThemeProvider>
  )
}

export default Editor
