import type { NextPage } from 'next'
import Head from 'next/head'
import styles from '../styles/Home.module.css'
import useStore from '../global/state'
import {useEffect, useState} from 'react'
import { ThemeProvider, CssBaseline, Button } from '@mui/material'
import {darkTheme, lightTheme} from '../styles/themes'
import SettingsMenu from '../components/SettingsMenu'
import { createFFmpeg, fetchFile } from '@ffmpeg/ffmpeg'
const ffmpeg = createFFmpeg({
  log: true,
})

const VideoDownloadTest: NextPage = () => {
  const store = useStore();
  const [isLight, setIsLight] = useState(true); //default is darkmode
  const [urlList, setUrlList] = useState<string[]>([])
  const [vid, setVid] = useState();
  const [downloadedVids, setDownloadedVids] = useState<string[]>([])

  const [cuttingVideo, setCuttingVideo] = useState<boolean>(false)
  const [file, setFile] = useState();

  //run on store.isLight update
  useEffect(() => {
    setIsLight(store.isLight);
  }, [store.isLight]);

  useEffect(() => {
    // load()
    store.urlList.forEach((videoObj) => {
      addToURLList(videoObj.url)
    })
  }, [])

  const load = async() => {
    await ffmpeg.load()
    console.log(ffmpeg.isLoaded())
  }

  function addToURLList(url:string){
    if(!urlList.includes(url))
      setUrlList([...urlList, url])
  }


  function createVideo(videoData){
      const data = new Uint8Array(videoData)
      return URL.createObjectURL(new Blob([videoData], {type: 'video/mp4'}))

  }

  const callToApi = async() => {
    await fetch('http://localhost:3000/api/download', 
    {method: 'POST', body: JSON.stringify(urlList)})
    .then(res => res.json())
    .then((data) => {
      for(let i = 0; i < data.videoDataArr.length; i++){
        const vid = createVideo(data.videoDataArr[i].data)
        setDownloadedVids([...downloadedVids, vid])
      }
    })
  }

  const callToApiIndividual = async(videourl:string, videoIndex:number) => {
      let video = '';
      await fetch('http://localhost:3000/api/download', 
      {method: 'POST', body: JSON.stringify(videourl)})
      .then(res => res.json())
      .then((data) => {
        console.log('downloaded')
        const rawData = new Uint8Array(data.videoData.data);
        video = URL.createObjectURL(new Blob([rawData], {type: 'video/mp4'}))
        // setDownloadedVids([...downloadedVids, video])
      })
      .finally(() => {
        cutVideo(video, videoIndex)
      })
  }

  const cutVideo = async(video:string, videoIndex:number) => {
    if(!ffmpeg.isLoaded())
      await ffmpeg.load()
    if(ffmpeg.isLoaded()){
      ffmpeg.FS('writeFile', ('initVid' + videoIndex + '.mp4'), await fetchFile(video))
      await ffmpeg.run('-i', ('initVid' + videoIndex + '.mp4'), '-ss', '00:00:30', '-to', '00:01:30', '-c:v', 'copy', '-c:a', 'copy', ('vid' + videoIndex + '.mp4'))
      .then(() => {
        const x = ffmpeg.FS('readFile', ('vid' + videoIndex + '.mp4' ))
        const v = URL.createObjectURL(new Blob([x], {type: 'video/mp4'}))
        setDownloadedVids((downloadedVids) => [...downloadedVids, v])
      })
    }
  }

  useEffect(() => {
    console.log('\n\n')
    console.log(downloadedVids)
  }, [downloadedVids])
  
  // const doThatShit = async() => {
  //   ffmpeg.FS('writeFile', 'vid.mp4', await fetchFile(file))
  //   await ffmpeg.run('-i', 'vid.mp4', '-ss', '00:00:30', '-to', '00:01:30', '-c:v', 'copy', '-c:a', 'copy', 'vid2.mp4')
  //   .then(() => {
  //     const x = ffmpeg.FS('readFile', 'vid2.mp4')
  //     const v = URL.createObjectURL(new Blob([x], {type: 'video/mp4'}))
  //     setDownloadedVids([...downloadedVids, v])
  //   })
  // }

  const downloadVids = async() => {
    for(let i = 0; i < store.urlList.length; i++){
      await callToApiIndividual(store.urlList[i].url, i)
    }
  }



  return (
    <ThemeProvider theme={isLight ? lightTheme : darkTheme}>
      <CssBaseline/>
      <div className={styles.container}>
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <main className={styles.main}>
          <SettingsMenu/>
          <h2 className={styles.title}>VideoDownloadTest</h2>
          <input type="file" accept="video/mp4" onChange={(e) => setFile(e.target.files?.item(0))}/>

          {/*<button onClick={doThatShit}>GO</button>*/}
          <button onClick={downloadVids}>Call API</button>
          {downloadedVids.map(function(video, i){
            return(
              <video controls src={video} key={i}/>
            )
          })}
        </main>
      </div>
    </ThemeProvider>
  )
}

export default VideoDownloadTest
